! cg-to-aa.cns
!    Converts a CG model to all atoms
!
! ***********************************************************************
! * Copyright 2003-2025 Alexandre Bonvin, Utrecht University.           *
! * This code is part of the HADDOCK software and governed by its       *
! * license. Please see the LICENSE file that should have been included *
! * as part of this package.                                            *
! ***********************************************************************
!

if ( $log_level = "verbose" ) then
    set message=normal echo=on end
elseif ( $log_level = "normal" ) then
    set message=normal echo=off end
else
    set message=off echo=off end
end if

!==================================================================!
! Initialisation of variables
!==================================================================!

evaluate ($ini_count    =1)

evaluate ($data.ncomponents=$ncomponents)


! non-bonded parameter set to use
evaluate ($toppar.par_nonbonded = "OPLSX" )


!Dihedrals, DNA and distance restraints
evaluate ($data.dihedrals_scale=$dihedrals_scale)
evaluate ($data.flags.cdih =$dihedrals_on)
evaluate ($data.dnarest =$dnarest_on)
evaluate ($data.ssdihed =$ssdihed)
evaluate ($data.error_dih =$error_dih)


! planarity restraints
evaluate ($data.flags.plan =  false)

! distance restraints
evaluate ($data.flags.noe  =  true)
evaluate ($data.randremoval=$randremoval)
evaluate ($data.npart=$npart)

evaluate ($data.ambig_scale=$ambig_scale)
evaluate ($data.unambig_scale=$unambig_scale)
evaluate ($data.hbond_scale=$hbond_scale)

evaluate ($data.contactairs=$contactairs)
if ($data.contactairs eq true) then
    evaluate ($data.randremoval = false)
end if
evaluate ($data.kcont=$kcont)

! NCS restraints
evaluate ($data.kncs = $kncs)
evaluate ($Data.flags.ncs = $ncs_on)
evaluate ($data.nncs = $nncs)

! Symmetry restraints
evaluate ($data.ksym = $ksym)
evaluate ($Data.flags.sym = $sym_on)
evaluate ($data.nc2sym = $nc2sym)
evaluate ($data.nc3sym = $nc3sym)
evaluate ($data.ns3sym = $ns3sym)
evaluate ($data.nc4sym = $nc4sym)
evaluate ($data.nc5sym = $nc5sym)
evaluate ($data.nc6sym = $nc6sym)

!Dihedral angle energy term:
evaluate ($data.flags.dihed = true)

!Electrostatics:
evaluate ($data.flags.elec =$elecflag)
evaluate ($data.epsilon =$epsilon)
evaluate ($Data.epsilon_cg =$epsilon_cg)
evaluate ($data.dielec  =$dielec)

!Interaction matrix:
evaluate ($nmol1=1)
while ($nmol1 <=$data.ncomponents) loop mol1
    evaluate ($nmol2=$nmol1 + 1)
    evaluate ($scale.int_$nmol1_$nmol1 =$int_$nmol1_$nmol1)
    while ($nmol2 <=$data.ncomponents) loop mol2
        evaluate ($scale.int_$nmol1_$nmol2 =$int_$nmol1_$nmol2)
        evaluate ($scale.int_$nmol2_$nmol1 =$int_$nmol1_$nmol2)
        evaluate ($nmol2=$nmol2 + 1)
    end loop mol2
    evaluate ($nmol1 = $nmol1 + 1)
end loop mol1


! Unsupported restraints
evaluate ($data.flags.em   = false)
evaluate ($data.flags.rg   = false)
evaluate ($data.flags.zres = false)
evaluate ($data.flags.sani = false)
evaluate ($data.flags.xrdc = false)
evaluate ($data.flags.xpcs = false)
evaluate ($data.flags.dani = false)
evaluate ($data.flags.vean = false)

! Other parameters
evaluate ($refine.keepwater = false)

!==================================================================!

if ( $log_level = "verbose" ) then
    set message=normal echo=on end
elseif ( $log_level = "normal" ) then
    set message=normal echo=off end
else
    set message=off echo=off end
end if

{* Read paramters and set various force field related variables *}

@MODULE:read_param.cns

parameter
    bond  (all) (all) 1000 TOKEN
    angle (resn WAT ) (resn WAT ) (resn WAT ) 500 TOKEN
    angle (resn HOH ) (resn HOH ) (resn HOH ) 500 TOKEN
    angle (resn TIP*) (resn TIP*) (resn TIP*) 500 TOKEN
end

igroup
    interaction  (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA))
                 (not (resn ANI or resn DAN or resn XAN or resn DUM or resn SHA)) weight * 1 end
    interaction  (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM)
                 (resn ANI or resn DAN or resn XAN or resn DUM or resn DUM) weight * 1 vdw 0.0 elec 0.0 end
    interaction  (resn SHA) (not resn SHA) weight * 0 end
end

flag include bond angle impr vdw end

if ($data.flags.dihed eq true) then
  flag include dihed end
end if

if ($data.flags.elec eq false) then
    evaluate ($elec=0.0)
    flag exclude elec end
end if

! Parameters for the presence of a CG model
parameter
    nbonds
        nbxmod=5 atom cdie shift
        cutnb=15.0 ctofnb=14.0 ctonnb=12.0 eps=$Data.epsilon_cg e14fac=0.4 inhibit 0.25
        wmin=0.5 tolerance 0.5
     end
end

parameter nbonds ? end end


{* set the energy flags ======================================================== *}

inline @MODULE:setflags.cns


{* Define restraint function =================================================== *}

noe 
  nres 1000000
  averaging  cgaa center
  scale      cgaa 50.0
  sqconstant cgaa 1.0
  sqexponent cgaa 2
  soexponent cgaa 1
  rswitch    cgaa 1.0
  sqoffset   cgaa 0.0
  asymptote  cgaa 2.0
  msoexponent cgaa 1
  masymptote  cgaa -0.1
  mrswitch    cgaa 1.0
end


{* Change segid of CG model and read AA pdb, psf and restraint files =========== *}

evaluate ($nchain=0)
while ($nchain < $data.ncomponents) loop nloop1
    evaluate ($nchain = $nchain + 1)
    evaluate ($newseg = $prot_segid_$nchain + "CG")
    do (segid = $newseg) (segid $prot_segid_$nchain)
    evaluate($psf_infile_$nchain= "RUN:begin-aa/" + $Toppar.prot_root_$nchain + ".psf")
    structure @@$input_aa_psf_filename_$nchain end
    coor @@$input_aa_pdb_filename_$nchain
    noe @$input_cgtbl_filename_$nchain
end loop nloop1


{* Check for the presence of ions and add distance restraints / covalent bond == *}

@MODULE:restrain-ions.cns


{* Morph AA model to CG model ================================================== *}


! Fix the CG model
fix sele=(segid *CG) end

parameter
    nbonds
        nbxmod=5 atom cdie shift
        cutnb=6.5 ctofnb=5.5 ctonnb=4.5 eps=1.0 e14fac=0.4 inhibit 0.25
        wmin=0.5 tolerance  0.5
    end
end

evaluate ($kinter = 0.001)
@MODULE:scale_inter.cns

flag excl * incl noe end

energy end

! Rigid body EM to position AA model onto CG model
!
minimize rigid
    eval ($nchain = 0)
    while ($nchain < $data.ncomponents) loop nloop1
        eval($nchain = $nchain + 1)
        group (segid $Toppar.prot_segid_$nchain)
        translation=true
    end loop nloop1
    nstep 200
    nprint 10  
end

! Define secondary structure dihedral angle restraints
!
@MODULE:protein-ss-restraints-alpha-beta.def

! Check for fully flexible segments and increase the MD refinement length if detected
!
evaluate($scalefac = 1.0)
if ($nfle > 0) then
    evaluate($scalefac = 10.0)
end if

! Starting the morphing for conformational changes
! Powell EM, including covalent terms
!

flag excl * incl bond angl impr dihe vdw elec noe cdih end
evaluate ($kinter = 0.01)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

evaluate ($kinter = 0.05)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

evaluate ($kinter = 0.1)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

if ($failure eq false) then
! Short MD optimization
!
    {- Friction coefficient, in 1/ps. -}
    do (fbeta=100) (not segid *CG)

    evaluate ($bath=300.0)
    evaluate ($nstep=500 * $scalefac)
    evaluate ($timestep=0.0005)

    do (vx=maxwell($bath)) (all)
    do (vy=maxwell($bath)) (all)
    do (vz=maxwell($bath)) (all)

    dynamics cartesian
        nstep=$nstep
        timestep=$timestep
        tcoupling=true temperature=$bath
        nprint=50
        cmremove=true
    end

    minimize powell nstep=500 drop=40.0 nprint=25 end

end if

! Define secondary structure dihedral angle restraints
!
rest dihe reset end
@MODULE:protein-ss-restraints-alpha-beta.def

evaluate ($kinter = 0.5)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

if ($failure eq false) then
! Short MD optimization
!
    {- Friction coefficient, in 1/ps. -}
    do (fbeta=100) (not segid *CG)

    evaluate ($bath=300.0)
    evaluate ($nstep=500 * $scalefac)
    evaluate ($timestep=0.0005)

    do (vx=maxwell($bath)) (all)
    do (vy=maxwell($bath)) (all)
    do (vz=maxwell($bath)) (all)

    dynamics cartesian
        nstep=$nstep
        timestep=$timestep
        tcoupling=true temperature=$bath
        nprint=50
        cmremove=true
    end

    minimize powell nstep=500 drop=40.0 nprint=25 end

end if

! Define secondary structure dihedral angle restraints
!
rest dihe reset end
@MODULE:protein-ss-restraints-alpha-beta.def

evaluate ($kinter = 1.0)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

if ($failure eq false) then
! Short MD optimization
!
    {- Friction coefficient, in 1/ps. -}
    do (fbeta=100) (not segid *CG)

    evaluate ($bath=300.0)
    evaluate ($nstep=500 * $scalefac)
    evaluate ($timestep=0.0005)

    do (vx=maxwell($bath)) (all)
    do (vy=maxwell($bath)) (all)
    do (vz=maxwell($bath)) (all)

    dynamics cartesian
        nstep=$nstep
        timestep=$timestep
        tcoupling=true temperature=$bath
        nprint=50
        cmremove=true
    end

    minimize powell nstep=500 drop=40.0 nprint=25 end

end if

parameter
    nbonds
        nbxmod=5 atom cdie shift
        cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25
        wmin=0.5 tolerance 0.5
    end
end

! Define secondary structure dihedral angle restraints
!
rest dihe reset end
@MODULE:protein-ss-restraints-alpha-beta.def

evaluate ($kinter = 1.0)
@MODULE:scale_cg-to-aa.cns
minimize powell nstep=500 drop=40.0 nprint=25 end

if ($failure eq false) then
! Short MD optimization
!
    {- Friction coefficient, in 1/ps. -}
    do (fbeta=100) (not segid *CG)

    evaluate ($bath=300.0)
    evaluate ($nstep=500 * $scalefac)
    evaluate ($timestep=0.0005)

    do (vx=maxwell($bath)) (all)
    do (vy=maxwell($bath)) (all)
    do (vz=maxwell($bath)) (all)

    dynamics cartesian
        nstep=$nstep
        timestep=$timestep
        tcoupling=true temperature=$bath
        nprint=50
        cmremove=true
    end

    minimize powell nstep=500 drop=40.0 nprint=25 end

end if

minimize powell nstep=500 drop=40.0 nprint=25 end
minimize powell nstep=500 drop=10.0 nprint=25 end

energy end

parameter nbonds eps=1.0 end end

delete sele=(segid *CG) end


! Define AA parameters

parameter
    nbonds
        nbxmod=5 atom cdie shift
        cutnb=9.5 ctofnb=8.5 ctonnb=6.5 eps=1.0 e14fac=0.4 inhibit 0.25
        wmin=0.5 tolerance  0.5
    end
end

if ($data.flags.elec eq true) then
    flag include elec end
    if ($data.dielec eq "rdie") then
        parameter nbonds eps=$data.epsilon rdie shift switch end end
        ! shift statement needed first to activate switch (CNS bug?)
    else
        parameter nbonds eps=$data.epsilon cdie end end
    end if
else
    evaluate ($elec=0.0)
    flag exclude elec end
end if


! final minimization

flag excl harm end
mini powell nstep=$nemsteps drop=10 nprint=10 end

{* ======================= calculate free molecules internal energy ============ *}

igroup
    interaction (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM))
                (not (resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DUM)) weight * 1 end
end

do (refx=x) (all)
do (refy=y) (all)
do (refz=z) (all)

fix sele=(resn ANI or resn DAN or resn XAN or resn SHA or resn WAT or resn HOH or resn TIP* or resn DMS) end

flag excl noe dani sani vean xrdc xpcs coll cdih zhar end
flag include bond angle dihe impr vdw end

evaluate ($elec = 0.0)
evaluate ($eintfree = 0.0)
if ($data.flags.elec eq true) then
    flag include elec end
end if

inline @MODULE:calc_free-ene.cns

fix sele=(not all) end

do (x = refx) (all)
do (y = refy) (all)
do (z = refz) (all)


{* ===================== calculate complex internal energy *}

evaluate ($kinter = 1.0)
flag include bond angle dihe impr vdw end
energy end

@MODULE:scale_intra_only.cns

evaluate ($elec = 0.0)
evaluate ($eintcplx = 0.0)
if ($data.flags.elec eq true) then
    flag include elec end
    ! reset epsilon to the default AA value
    parameter nbonds eps=$Data.epsilon end end
end if

energy end

evaluate ($eintcplx = $bond + $angl + $impr + $dihe + $vdw + $elec)


{* ===================== calculate final energies and write structure *}
evaluate ($cdih=0.0)
flag incl noe cdih end
if ($data.ncomponents > 1) then
    evaluate ($kinter = 1.0)
    @MODULE:scale_inter_final.cns
else
    @MODULE:scale_intra_only.cns
end if

noe
    scale dist $data.unambig_scale
    scale ambi $data.ambig_scale
    scale hbon $data.hbond_scale
    scale symm 0.0
    scale cont 0.0
end
energy end
evaluate ($eair= $noe)

evaluate ($esym = 0.0)
evaluate ($ncs = 0.0)
evaluate ($zhar = 0.0)
evaluate ($rms_test_noe = 0.0)
evaluate ($violations_test_noe = 0)
if ($data.flags.sym eq true) then
    ! calculatee first the symmetry energy
    noe reset nres= 1200000 end
    @MODULE:symmultimer.cns
    noe
        scale symm $data.ksym
    end
    energy end
    evaluate ($esym = $noe)
    if ($data.randremoval eq true) then
        evaluate ($violations_test_noe=0)
        evaluate ($rms_test_noe=0.0)
        display Print out of cross-validated violations and rms not
        display possible in combination with symmetry restraints
        display CV values set therefore to 0
    end if
    noe reset end
    set seed=$seed end
    !read back all the distance restraints:
    @@MODULE:read_noes.cns
    !random removal of restaints
    if ($data.randremoval eq true) then
        noe cv $npart ? end
    end if
    noe
        scale dist $data.unambig_scale
        scale ambi $data.ambig_scale
        scale hbon $data.hbond_scale
    end
    print threshold=0.3 noe
    evaluate ($rms_noe=$result)
    evaluate ($violations_noe=$violations)
    if ($data.randremoval eq true) then
        evaluate ($rms_test_noe=$test_rms)
        evaluate ($violations_test_noe=$test_violations)
    end if
else
    print threshold=0.3 noe
    evaluate ($rms_noe=$result)
    evaluate ($violations_noe=$violations)
    if ($data.randremoval eq true) then
        evaluate ($rms_test_noe=$test_rms)
        evaluate ($violations_test_noe=$test_violations)
    end if
end if

if ($data.dnarest eq true ) then
    @MODULE:dna-rna_restraints.cns
end if

energy end
evaluate ($etot = $ener - $noe)
evaluate ($noe = $eair)
evaluate ($etot = $etot + $noe)

inline @MODULE:print_coorheader.cns


{* determine whether the final models should be reoriented along their principal *}
{* axes before writing to file ================================================= *}
eval($reorient = true)
evaluate ($ncount = 0)
while ($ncount < $data.ncomponents) loop orientmol
    evaluate ($ncount = $ncount + 1)
    eval($watersegname_$ncount="WA" + encode($ncount))
    if ($mol_fix_origin_$ncount eq true) then
        eval($reorient = false)
    end if
end loop orientmol

if ($reorient = true) then
    coor sele= (not name H* and not resn ANI and not resn XAN and not resn DAN) orient end
end if

write coordinates format=pdbo output=$output_pdb_filename end

set message=normal echo=on end

display OUTPUT: $output_pdb_filename

stop
